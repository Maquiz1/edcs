# Generated by Django 3.1.7 on 2022-02-18 12:25

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_crypto_fields.fields.encrypted_char_field
import django_revision.revision_field
import edcs_screening.model_mixins.screening_fields_model_mixin
import edcs_sites.models
import edcs_utils.date
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubjectScreening',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('reference', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Reference')),
                ('screening_identifier', models.CharField(blank=True, editable=False, max_length=50, unique=True, verbose_name='Screening ID')),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=10)),
                ('age_in_years', models.IntegerField(help_text='Estimated age  in years if patient doesnâ€™t know', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(110)])),
                ('consent_ability', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Participant or legal guardian/representative able and willing to give informed consent.')),
                ('unsuitable_for_study', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text='If YES, patient NOT eligible, please give reason below.', max_length=5, verbose_name='Is there any other reason the patient is deemed to not be suitable for the study?')),
                ('reasons_unsuitable', models.TextField(blank=True, max_length=150, null=True, verbose_name='Reason not suitable for the study')),
                ('unsuitable_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Does the study coordinator agree that the patient is not suitable for the study?')),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('reasons_ineligible', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('eligibility_datetime', models.DateTimeField(editable=False, help_text='Date and time eligibility was determined', null=True)),
                ('consented', models.BooleanField(default=False, editable=False)),
                ('refused', models.BooleanField(default=False, editable=False)),
                ('subject_identifier', models.CharField(max_length=50)),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('clinic_type', models.CharField(choices=[('lung_cancer', 'Lung cancer clinic/institute'), ('pathology', 'Pathology'), ('other_clinic', 'Other ward/clinic other than cancer')], max_length=45, verbose_name='From which type of clinic was the patient selected?')),
                ('patient_category', models.CharField(choices=[('lung_cancer_suspect', 'Lung cancer suspect'), ('other_cancers', 'Other cancers'), ('cancer_free', 'Cancer free')], max_length=45, verbose_name='Patient Category?')),
                ('screening_consent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Has the subject given his/her verbal consent to be screened for the U54 Lung Cancer Study?')),
                ('region', models.CharField(max_length=50, verbose_name='Region:')),
                ('district', models.CharField(max_length=50, verbose_name='District:')),
                ('patient_know_dob', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, verbose_name='Does the patient know his/her date of birth?')),
                ('patient_dob', models.DateField(blank=True, null=True, verbose_name='What is patient date of birth?')),
                ('hospital_id', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Patients hospital identification number:')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Use UPPERCASE letters only. May be 2 or 3 letters. (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator('[A-Z]{1,3}', 'Invalid format'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3)])),
                ('tb_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the patient have a positive TB diagnosis?')),
                ('malignancy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Have you ever had any other malignancy? ')),
                ('above_eighteen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Is the patient 18 years and above?')),
                ('persistent_breathlessness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had persistent breathlessness?')),
                ('persistent_tiredness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had persistent tiredness or lack of energy?')),
                ('wheezing', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient been wheezing?')),
                ('shortness_of_breath', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had shortness of breath?')),
                ('weight_loss', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had unexplained weight loss?')),
                ('abnormal_chest_xrays', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the patient have abnormal chest x-rays demonstrating nodules and/or masses?')),
                ('non_resolving_infection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the patient have non-resolving infection including tuberculosis?')),
                ('lung_cancer_suspect', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient been suspected to have lung cancer on the basis of clinical presentation?')),
                ('cough', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name="Has the patient had cough that doesn't go away after 2 or 3 weeks?")),
                ('long_standing_cough', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had a long-standing cough that gets worse?')),
                ('cough_blood', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient been coughing up blood or rust-colored sputum (spit or phlegm)?')),
                ('chest_infections', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had chest infections that keep coming back such as bronchitis, pneumonia?')),
                ('chest_pain', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had chest pain that is often worsen when breathing or coughing?')),
                ('diagnosed_lung_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Have you ever been diagnosed with lung cancer?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Screening',
                'verbose_name_plural': 'Subject Screening',
            },
            managers=[
                ('on_site', edcs_sites.models.CurrentSiteManager()),
                ('objects', edcs_screening.model_mixins.screening_fields_model_mixin.ScreeningManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalSubjectScreening',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('reference', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name='Reference')),
                ('screening_identifier', models.CharField(blank=True, db_index=True, editable=False, max_length=50, verbose_name='Screening ID')),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=10)),
                ('age_in_years', models.IntegerField(help_text='Estimated age  in years if patient doesnâ€™t know', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(110)])),
                ('consent_ability', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Participant or legal guardian/representative able and willing to give informed consent.')),
                ('unsuitable_for_study', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', help_text='If YES, patient NOT eligible, please give reason below.', max_length=5, verbose_name='Is there any other reason the patient is deemed to not be suitable for the study?')),
                ('reasons_unsuitable', models.TextField(blank=True, max_length=150, null=True, verbose_name='Reason not suitable for the study')),
                ('unsuitable_agreed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=5, verbose_name='Does the study coordinator agree that the patient is not suitable for the study?')),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('reasons_ineligible', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('eligibility_datetime', models.DateTimeField(editable=False, help_text='Date and time eligibility was determined', null=True)),
                ('consented', models.BooleanField(default=False, editable=False)),
                ('refused', models.BooleanField(default=False, editable=False)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50)),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('clinic_type', models.CharField(choices=[('lung_cancer', 'Lung cancer clinic/institute'), ('pathology', 'Pathology'), ('other_clinic', 'Other ward/clinic other than cancer')], max_length=45, verbose_name='From which type of clinic was the patient selected?')),
                ('patient_category', models.CharField(choices=[('lung_cancer_suspect', 'Lung cancer suspect'), ('other_cancers', 'Other cancers'), ('cancer_free', 'Cancer free')], max_length=45, verbose_name='Patient Category?')),
                ('screening_consent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Has the subject given his/her verbal consent to be screened for the U54 Lung Cancer Study?')),
                ('region', models.CharField(max_length=50, verbose_name='Region:')),
                ('district', models.CharField(max_length=50, verbose_name='District:')),
                ('patient_know_dob', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, verbose_name='Does the patient know his/her date of birth?')),
                ('patient_dob', models.DateField(blank=True, null=True, verbose_name='What is patient date of birth?')),
                ('hospital_id', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Patients hospital identification number:')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Use UPPERCASE letters only. May be 2 or 3 letters. (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator('[A-Z]{1,3}', 'Invalid format'), django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3)])),
                ('tb_diagnosis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the patient have a positive TB diagnosis?')),
                ('malignancy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Have you ever had any other malignancy? ')),
                ('above_eighteen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Is the patient 18 years and above?')),
                ('persistent_breathlessness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had persistent breathlessness?')),
                ('persistent_tiredness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had persistent tiredness or lack of energy?')),
                ('wheezing', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient been wheezing?')),
                ('shortness_of_breath', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had shortness of breath?')),
                ('weight_loss', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had unexplained weight loss?')),
                ('abnormal_chest_xrays', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the patient have abnormal chest x-rays demonstrating nodules and/or masses?')),
                ('non_resolving_infection', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the patient have non-resolving infection including tuberculosis?')),
                ('lung_cancer_suspect', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient been suspected to have lung cancer on the basis of clinical presentation?')),
                ('cough', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name="Has the patient had cough that doesn't go away after 2 or 3 weeks?")),
                ('long_standing_cough', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had a long-standing cough that gets worse?')),
                ('cough_blood', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient been coughing up blood or rust-colored sputum (spit or phlegm)?')),
                ('chest_infections', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had chest infections that keep coming back such as bronchitis, pneumonia?')),
                ('chest_pain', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the patient had chest pain that is often worsen when breathing or coughing?')),
                ('diagnosed_lung_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Have you ever been diagnosed with lung cancer?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Screening',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
