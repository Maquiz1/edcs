# Generated by Django 3.1.7 on 2022-07-05 09:40

import _socket
from django.conf import settings
import django.contrib.sites.managers
from django.db import migrations, models
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import edcs_model.models.fields.other_charfield
import edcs_model.models.validators.date
import edcs_utils.date
import edcs_visit_schedule.managers
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('edcs_lists', '0006_auto_20220705_0940'),
        ('sites', '0002_alter_domain_unique'),
        ('edcs_subject', '0031_auto_20220705_0754'),
    ]

    operations = [
        migrations.CreateModel(
            name='PreAirQuality',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('monitor_start_date', models.DateTimeField(validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Monitor start date')),
                ('selected_air_monitor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Has this household been selected for Personal Air Monitoring?')),
                ('household_num', models.CharField(max_length=14, verbose_name='House hold number:')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=45, verbose_name='Gender')),
                ('total_num_rooms', models.IntegerField(help_text='including bedroom/sleeping areas and excluding bathroom', verbose_name='Total number of rooms in the household')),
                ('total_num_windows', models.IntegerField(verbose_name='Total number of windows in the household')),
                ('cooking_done_outside', models.IntegerField(help_text='If less than 1 month, enter 01', verbose_name='If outside the house, on average how many months per year do you cook outside?')),
                ('cooking_fuel', models.CharField(choices=[('kerosene', 'Kerosene'), ('charcoal', 'Charcoal'), ('coal', 'Coal'), ('gas ', 'Gas '), ('agricultural_crop', 'Agricultural crop'), ('wood', 'Wood'), ('gobar_gas ', 'Gobar gas '), ('electricity', 'Electricity'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='What is the primary fuel currently used for cooking?')),
                ('cooking_fuel_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('cooking_fuel_duration', models.IntegerField(help_text='If duration is less than 1 year, please indicate “01”', verbose_name='For how long have you been using this primary fuel for cooking?')),
                ('previously_used_cooking_fuel', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Was there a previous primary fuel used for cooking?')),
                ('previously_cooking_fuel', models.CharField(choices=[('kerosene', 'Kerosene'), ('charcoal', 'Charcoal'), ('coal', 'Coal'), ('gas ', 'Gas '), ('agricultural_crop', 'Agricultural crop'), ('wood', 'Wood'), ('gobar_gas ', 'Gobar gas '), ('electricity', 'Electricity'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='If yes, what was the previous primary fuel used for cooking?')),
                ('previously_cooking_fuel_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('previously_cooking_fuel_duration', models.IntegerField(help_text='If duration is less than 1 year, please indicate “01”', verbose_name='For how long did you use the previous primary fuel for cooking? ')),
                ('cooking_area', models.ManyToManyField(to='edcs_lists.CookingArea', verbose_name='If inside the house, Does the inside cooking area have any of the following?')),
                ('cooking_done', models.ManyToManyField(to='edcs_lists.CookingDone', verbose_name='Where is the cooking for the household done?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Pre Air Quality',
                'verbose_name_plural': 'Pre Air Quality',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='PostAirQuality',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('monitor_end_date', models.DateTimeField(validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Monitor end date')),
                ('air_monitor_problem', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='During the air monitoring, were there any problems with the household air monitor?')),
                ('cooking_fuel_used', models.CharField(choices=[('kerosene', 'Kerosene'), ('charcoal', 'Charcoal'), ('coal', 'Coal'), ('gas ', 'Gas '), ('agricultural_crop', 'Agricultural crop'), ('wood', 'Wood'), ('gobar_gas ', 'Gobar gas '), ('electricity', 'Electricity'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='During the air monitoring: What was the primary fuel used for cooking?')),
                ('cooking_fuel_used_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('cooking_fuel_used_duration', models.IntegerField(help_text='Enter as minutes Eg 1hr = 60min', verbose_name='For how many hours was the primary fuel used for cooking?')),
                ('other_cooking_fuel_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('other_cooking_fuel_duration', models.IntegerField(help_text='Enter as minutes Eg 1hr = 60min', verbose_name='For how many hours was the primary fuel used for cooking?')),
                ('primary_fuel_heating', models.CharField(choices=[('no_heating', 'No heating during monitoring'), ('coal_open_fire', 'Coal open fire'), ('wood_open_fire', 'Wood open fire'), ('gas_furnace', 'Gas furnace'), ('portable_heater', 'Portable heater'), ('electricity', 'Electricity'), ('OTHER', 'Other')], max_length=45, verbose_name='During the air monitoring, what was the primary fuel used for heating?')),
                ('primary_fuel_heating_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('primary_fuel_heating_duration', models.IntegerField(help_text='Enter as minutes Eg 1hr = 60min', verbose_name='For how many hours was the primary fuel used for cooking?')),
                ('smoke_inside', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='During the air monitoring, did people smoke tobacco products in this house?')),
                ('smoke_inside_duration', models.CharField(choices=[('1_times', 'Once/day'), ('2_4_times', '2-4 times/day'), ('5_10_times', '5-10 times/day'), ('more_10_times', '>10 times/day')], max_length=45, verbose_name='If yes, how many times did people smoke tobacco products in this house?')),
                ('air_pollution_monitor_reading', models.DecimalField(decimal_places=4, max_digits=12, verbose_name='Reading from air pollution assessment')),
                ('air_monitor_problem_list', models.ManyToManyField(to='edcs_lists.AirMonitorProblem', verbose_name='If yes, select all that apply')),
                ('other_cooking_fuel', models.ManyToManyField(to='edcs_lists.OtherCookingFuel', verbose_name='What other fuels were used for cooking?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('solid_fuel', models.ManyToManyField(to='edcs_lists.SolidFuel', verbose_name='If you used solid fuel (charcoal, wood, coal, agriculture/crop, animal dung or shrub/grass) as primary fuel or other fuel for cooking, what type of stove did you use these fuels in?')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Post Air Quality',
                'verbose_name_plural': 'Post Air Quality',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalPreAirQuality',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('monitor_start_date', models.DateTimeField(validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Monitor start date')),
                ('selected_air_monitor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Has this household been selected for Personal Air Monitoring?')),
                ('household_num', models.CharField(max_length=14, verbose_name='House hold number:')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=45, verbose_name='Gender')),
                ('total_num_rooms', models.IntegerField(help_text='including bedroom/sleeping areas and excluding bathroom', verbose_name='Total number of rooms in the household')),
                ('total_num_windows', models.IntegerField(verbose_name='Total number of windows in the household')),
                ('cooking_done_outside', models.IntegerField(help_text='If less than 1 month, enter 01', verbose_name='If outside the house, on average how many months per year do you cook outside?')),
                ('cooking_fuel', models.CharField(choices=[('kerosene', 'Kerosene'), ('charcoal', 'Charcoal'), ('coal', 'Coal'), ('gas ', 'Gas '), ('agricultural_crop', 'Agricultural crop'), ('wood', 'Wood'), ('gobar_gas ', 'Gobar gas '), ('electricity', 'Electricity'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='What is the primary fuel currently used for cooking?')),
                ('cooking_fuel_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('cooking_fuel_duration', models.IntegerField(help_text='If duration is less than 1 year, please indicate “01”', verbose_name='For how long have you been using this primary fuel for cooking?')),
                ('previously_used_cooking_fuel', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Was there a previous primary fuel used for cooking?')),
                ('previously_cooking_fuel', models.CharField(choices=[('kerosene', 'Kerosene'), ('charcoal', 'Charcoal'), ('coal', 'Coal'), ('gas ', 'Gas '), ('agricultural_crop', 'Agricultural crop'), ('wood', 'Wood'), ('gobar_gas ', 'Gobar gas '), ('electricity', 'Electricity'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='If yes, what was the previous primary fuel used for cooking?')),
                ('previously_cooking_fuel_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('previously_cooking_fuel_duration', models.IntegerField(help_text='If duration is less than 1 year, please indicate “01”', verbose_name='For how long did you use the previous primary fuel for cooking? ')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Pre Air Quality',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPostAirQuality',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Report Date and Time')),
                ('monitor_end_date', models.DateTimeField(validators=[edcs_model.models.validators.date.datetime_not_future], verbose_name='Monitor end date')),
                ('air_monitor_problem', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='During the air monitoring, were there any problems with the household air monitor?')),
                ('cooking_fuel_used', models.CharField(choices=[('kerosene', 'Kerosene'), ('charcoal', 'Charcoal'), ('coal', 'Coal'), ('gas ', 'Gas '), ('agricultural_crop', 'Agricultural crop'), ('wood', 'Wood'), ('gobar_gas ', 'Gobar gas '), ('electricity', 'Electricity'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='During the air monitoring: What was the primary fuel used for cooking?')),
                ('cooking_fuel_used_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('cooking_fuel_used_duration', models.IntegerField(help_text='Enter as minutes Eg 1hr = 60min', verbose_name='For how many hours was the primary fuel used for cooking?')),
                ('other_cooking_fuel_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('other_cooking_fuel_duration', models.IntegerField(help_text='Enter as minutes Eg 1hr = 60min', verbose_name='For how many hours was the primary fuel used for cooking?')),
                ('primary_fuel_heating', models.CharField(choices=[('no_heating', 'No heating during monitoring'), ('coal_open_fire', 'Coal open fire'), ('wood_open_fire', 'Wood open fire'), ('gas_furnace', 'Gas furnace'), ('portable_heater', 'Portable heater'), ('electricity', 'Electricity'), ('OTHER', 'Other')], max_length=45, verbose_name='During the air monitoring, what was the primary fuel used for heating?')),
                ('primary_fuel_heating_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('primary_fuel_heating_duration', models.IntegerField(help_text='Enter as minutes Eg 1hr = 60min', verbose_name='For how many hours was the primary fuel used for cooking?')),
                ('smoke_inside', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='During the air monitoring, did people smoke tobacco products in this house?')),
                ('smoke_inside_duration', models.CharField(choices=[('1_times', 'Once/day'), ('2_4_times', '2-4 times/day'), ('5_10_times', '5-10 times/day'), ('more_10_times', '>10 times/day')], max_length=45, verbose_name='If yes, how many times did people smoke tobacco products in this house?')),
                ('air_pollution_monitor_reading', models.DecimalField(decimal_places=4, max_digits=12, verbose_name='Reading from air pollution assessment')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Post Air Quality',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
