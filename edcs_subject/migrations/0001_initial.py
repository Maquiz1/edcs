# Generated by Django 3.1.7 on 2022-02-18 12:25

import _socket
from django.conf import settings
import django.contrib.sites.managers
from django.db import migrations, models
import django.db.models.deletion
import django_audit_fields.fields.hostname_modification_field
import django_audit_fields.fields.userfield
import django_audit_fields.fields.uuid_auto_field
import django_audit_fields.models.audit_model_mixin
import django_revision.revision_field
import edcs_model.fields.other_charfield
import edcs_model.models.fields.other_charfield
import edcs_model.models.validators.date
import edcs_protocol.validators
import edcs_subject.models.subject_visit
import edcs_utils.date
import edcs_visit_schedule.managers
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('edcs_lists', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('edcs_appointment', '0001_initial'),
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of this report', validators=[edcs_protocol.validators.datetime_not_before_study_start, edcs_model.models.validators.date.datetime_not_future], verbose_name='Report date and time')),
                ('reason_unscheduled_other', edcs_model.fields.other_charfield.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If the reason for the unscheduled visit is "other", specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed', provide the reason for the missed visit")),
                ('reason_missed_other', edcs_model.fields.other_charfield.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If the reason for the missed visit is "other", specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edcs_model.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edcs_protocol.validators.date_not_before_study_start, edcs_model.models.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('scheduled', 'Scheduled visit (study)'), ('unscheduled', 'Routine / Unscheduled visit (non-study)'), ('missed', 'Missed visit')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('routine_non_study', 'Routine appointment (non-study)'), ('patient_unwell_outpatient', 'Patient unwell'), ('drug_refill', 'Drug refill only'), ('OTHER', 'Other'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name="If 'unscheduled', provide reason for the unscheduled visit")),
                ('clinic_services_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('info_source', models.CharField(choices=[('patient', 'Patient'), ('patient_and_outpatient', 'Patient, hospital notes and/or outpatient card'), ('patient_representive', 'Patient Representative (e.family member, friend)'), ('hospital_notes', 'Hospital notes'), ('outpatient_cards', 'Outpatient cards'), ('collateral_history', 'Collateral History from relative/guardian'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], max_length=25, verbose_name='What is the main source of this information?')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_appointment.appointment')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
            ],
            options={
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence', 'report_datetime'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', edcs_subject.models.subject_visit.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.VisitModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='SignSymptomLungCancer',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('what_brought_hospital_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('symptoms_how_long', models.CharField(choices=[('less_than_1month', 'Less than 1 month'), ('1_3months', '1-3 months'), ('3_6months', '3-6 months'), ('greater_than_6months', '>6 months')], max_length=45, verbose_name='For how long have you been sick with the above symptoms?')),
                ('symptoms_greater_than_6months', models.CharField(blank=True, max_length=45, null=True, verbose_name='If greater than 6 months, Please specify')),
                ('characterize_symptoms', models.CharField(choices=[('sudden_onset', 'Sudden onset'), ('gradual_onset', 'Gradual onset'), ('progressive_severity', 'Progressive in severity'), ('intermittent_severity', 'Intermittent in severity'), ('OTHER', 'Others')], max_length=45, verbose_name='How would you characterize your symptoms?')),
                ('characterize_symptoms_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('family_member_same_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Has anyone else in the family presented with the same symptoms?')),
                ('family_member_relationship', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('brother', 'Brother'), ('sister', 'Sister'), ('grandparent_mother_side', 'Grandparent from mother’s side'), ('grandparent_father_side', 'Grandparent from father’s side'), ('N/A', 'Not applicable'), ('OTHER', 'Others')], default='N/A', max_length=45, verbose_name='If yes, what is your relationship with the above-mentioned person?')),
                ('family_member_relationship_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('chest_radiation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer')], max_length=45, null=True, verbose_name='Do you have history of chest radiation in the past 5 years?')),
                ('no_chest_radiation', models.IntegerField(blank=True, null=True, verbose_name='If yes, how many times?')),
                ('time_take_referred_cancer_facilities', models.IntegerField(help_text='(Ask the patient to show you his/her referral documents. Duration in days)', verbose_name='From the very first time you sought care from the health facility to the time you were referred to the cancer treatment facility, how long did it take?')),
                ('investigations_ordered', models.CharField(choices=[('blood_tests', 'Blood tests'), ('chest_xray', 'Chest X-ray'), ('ct_scan', 'CT scan'), ('lung_cancer_biopsy', 'Lung cancer biopsy'), ('sputum_tb_dx', 'Sputum for TB diagnosis'), ('OTHER', 'Others'), ('none_of_above', 'None of the above')], max_length=45, verbose_name='While at cancer treatment facility, what investigations did the doctor(s) order?')),
                ('investigations_ordered_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('non_investigations_ordered', models.TextField(blank=True, null=True, verbose_name='If none, state reason why?')),
                ('lung_cancer_dx', models.CharField(choices=[('lung_cancer_confirmed', 'Lung cancer confirmed'), ('non_cancerous', 'Non-cancerous'), ('inconclusive_results', 'Inconclusive results')], max_length=45, verbose_name='What is the patient’s lung cancer diagnosis?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
                ('what_brought_hospital', models.ManyToManyField(related_name='lung_cancer_symptoms', to='edcs_lists.LungCancerSymptoms', verbose_name='What brought you to the hospital that made the doctors suspect/diagnose you to have lung cancer?')),
            ],
            options={
                'verbose_name': 'Sign Symptoms Lung Cancer',
                'verbose_name_plural': 'Sign Symptoms Lung Cancer',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='OccupationalHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('history_working_industries', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer')], max_length=45, verbose_name='Do you have history of working in industries?')),
                ('industries_worked', models.CharField(choices=[('textile_industry', 'Textile industry'), ('chemical_production_industry', 'Chemical production industry'), ('food_processing_industry', 'Food processing industry'), ('drug_industry', 'Drug industry'), ('milling_industry', 'Milling industry'), ('construction_industry', 'Construction industry'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], default='N/A', max_length=45, verbose_name='If yes, what kind of industry did you work?')),
                ('industries_worked_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('history_working_mines', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer')], max_length=45, verbose_name='Do you have history of working in the mines?')),
                ('how_long_work_mine', models.CharField(choices=[('less_than_5yrs', '≤ 5 years'), ('greater_than_5yrs', '≥ 5 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, for how long have worked in the mines?')),
                ('activities_expose_to_smoke', models.TextField(blank=True, null=True, verbose_name='Are there any activities or daily events that expose you to smoke or dust on a daily basis that we have not asked you about, if true list them')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Occupational History',
                'verbose_name_plural': 'Occupational History',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='LungCancerTreatment',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('lung_cancer_stage', models.CharField(choices=[('one', 'One (1)'), ('two', 'Two (2)'), ('three', 'Three (3)'), ('four', 'Four (4)'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='What is the stage of lung cancer?')),
                ('date_start_treatment', models.DateField(blank=True, max_length=45, null=True, verbose_name='Date started Treatment?')),
                ('treatment', models.CharField(choices=[('chemotherapy', 'Chemotherapy'), ('radiation', 'Radiation'), ('surgical_resection', 'Surgical resection'), ('immunotherapy', 'Immunotherapy'), ('tyrosine_kinase_inhibitor', 'Tyrosine kinase inhibitor '), ('1_2above', '1 & 2 above'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Type of treatment?')),
                ('treatment_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Lung Cancer Treatment',
                'verbose_name_plural': 'Lung Cancer Treatment',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='LungCancerLabInvestigation',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('biopsy_tissues_mutation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='From the biopsy tissues, is there any mutation?')),
                ('mutation_detected', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, what mutations were detected?')),
                ('dna_methylation_age', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Was the DNA methylation age done?')),
                ('dna_methylation_result', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, what were the DNAm results?')),
                ('brock_score', models.CharField(blank=True, max_length=45, null=True, verbose_name='What was the patient’s Brock score?')),
                ('lungrads_score', models.CharField(blank=True, max_length=45, null=True, verbose_name='What was the patient’s LungRADS score?')),
                ('luniris_score', models.CharField(blank=True, max_length=45, null=True, verbose_name='What was the patient’s LunIRiS score?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Lung Cancer Lab Investigation',
                'verbose_name_plural': 'Lung Cancer Lab Investigation',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='HouseKitchenSurrounding',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('material_floor', models.CharField(choices=[('earth_sand_clay_mud_dung', 'Earth/sand/clay/mud/dung'), ('wood', 'Wood'), ('ceramic_tiles_vinyl', 'Ceramic tiles or vinyl'), ('cement_concrete', 'Cement/concrete'), ('OTHER', 'Other')], max_length=45, verbose_name='What is the main material of the floor of the dwelling?')),
                ('material_roof', models.CharField(choices=[('no_roof', 'No roof'), ('thatch_straw', 'Thatch/straw'), ('mud', 'Mud'), ('metal', 'Metal'), ('wood', 'Wood'), ('brick', 'Brick'), ('tiles', 'Tiles'), ('slate', 'Slate'), ('OTHER', 'Others')], max_length=45, verbose_name='What is the main material of the roof of the dwelling?')),
                ('material_interior_wall', models.CharField(choices=[('no_walls', 'No walls'), ('mud', 'Mud'), ('wood', 'Wood'), ('cement_concrete', 'Cement/concrete'), ('stone', 'Stone'), ('metal', 'Metal'), ('OTHER', 'Others')], max_length=125, verbose_name='What is the main material of the interior walls of the dwelling?')),
                ('material_exterior_wall', models.CharField(choices=[('no_walls', 'No walls'), ('mud', 'Mud'), ('wood', 'Wood'), ('cement_concrete', 'Cement/concrete'), ('stone', 'Stone'), ('metal', 'Metal'), ('OTHER', 'Others')], max_length=15, verbose_name='What is the main material of the exterior walls of the dwelling?')),
                ('inside_swept', models.CharField(choices=[('daily', 'Daily'), ('two_day_week', 'Two days a week'), ('three_day_week', 'Three days a week'), ('four', 'Four'), ('five', 'Five'), ('six', 'Six'), ('weekly', 'Weekly (i.e., once in 7 days)'), ('monthly', 'Monthly'), ('less_one_month', 'Less than once a month'), ('never', 'Never')], max_length=125, verbose_name='How often is the inside of the dwelling swept?')),
                ('material_kitchen_floor', models.CharField(choices=[('earth_sand_clay_mud_dung', 'Earth/sand/clay/mud/dung'), ('wood', 'Wood'), ('ceramic_tiles_vinyl', 'Ceramic tiles or vinyl'), ('cement_concrete', 'Cement/concrete'), ('OTHER', 'Other')], max_length=125, verbose_name='What is the main material of the kitchen floor?')),
                ('material_kitchen_roof', models.CharField(choices=[('no_roof', 'No roof'), ('thatch_straw', 'Thatch/straw'), ('mud', 'Mud'), ('metal', 'Metal'), ('wood', 'Wood'), ('brick', 'Brick'), ('tiles', 'Tiles'), ('slate', 'Slate'), ('OTHER', 'Other')], max_length=125, verbose_name='What is the main material of the kitchen roof?')),
                ('material_interior_wall_kitchen', models.CharField(choices=[('no_roof', 'No roof'), ('thatch_straw', 'Thatch/straw'), ('mud', 'Mud'), ('metal', 'Metal'), ('wood', 'Wood'), ('brick', 'Brick'), ('tiles', 'Tiles'), ('slate', 'Slate'), ('OTHER', 'Others')], max_length=125, verbose_name='What is the main material of the interior walls of your kitchen?')),
                ('material_exterior_wall_kitchen', models.CharField(choices=[('no_walls', 'No walls'), ('mud', 'Mud'), ('wood', 'Wood'), ('cement_concrete', 'Cement/concrete'), ('stone', 'Stone'), ('metal', 'Metal'), ('OTHER', 'Others')], max_length=125, verbose_name='What is the main material of the exterior walls of your kitchen?')),
                ('kitchen_swept', models.CharField(choices=[('daily', 'Daily'), ('two_day_week', 'Two days a week'), ('three_day_week', 'Three days a week'), ('four_day_week', 'Four days a week'), ('five_day_week', 'Five days a week '), ('six_day_week', 'Six days a week'), ('weekly', 'Weekly (i.e., once in 7 days)'), ('monthly', 'Monthly (Once a month)'), ('never', 'Never')], max_length=125, verbose_name='How often is the inside of the kitchen swept?')),
                ('no_kitchen_window', models.IntegerField(verbose_name='How many windows in the kitchen open to outside the house?')),
                ('no_kitchen_door', models.IntegerField(verbose_name='How many doors in the kitchen open to outside the house?')),
                ('kitchen_chimney', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Does the kitchen have a chimney?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'House Kitchen Surrounding',
                'verbose_name_plural': 'House Kitchen Surrounding',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='HomeLocator',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('ward', models.CharField(max_length=45, verbose_name='Ward')),
                ('village', models.CharField(max_length=45, verbose_name='Village')),
                ('street', models.CharField(max_length=45, verbose_name='Street')),
                ('Kitongoji', models.CharField(max_length=45, verbose_name='Kitongoji')),
                ('Kitongoji_leader', models.CharField(max_length=85, verbose_name='Name of the Kitongoji leader')),
                ('nearest_church_mosque', models.CharField(max_length=45, verbose_name='Name of the nearest church and mosque')),
                ('nearest_healthcare_facility', models.CharField(max_length=125, verbose_name='Name of the nearest healthcare facility')),
                ('famous_person', models.CharField(max_length=125, verbose_name='Name of any person who is famous residing in the neighborhood')),
                ('famous_thing', models.CharField(max_length=125, verbose_name='Name of anything that is famous found in the neighborhood')),
                ('patient_phone_number', models.CharField(max_length=45, verbose_name='Phone number of the patient')),
                ('member_phone_number', models.TextField(max_length=125, verbose_name='Phone number of up to three members of the household')),
                ('close_relatives_phone_number', models.CharField(max_length=125, verbose_name='Phone numbers of other two close relatives')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Home Locator Form',
                'verbose_name_plural': 'Home Locator Form',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='HivLabInvestigation',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('hiv_status', models.CharField(choices=[('hiv_positive', 'HIV positive'), ('hiv_negative', 'HIV negative'), ('inconclusive_results', 'Inconclusive results')], max_length=45, verbose_name='If the patient’s status is unknown or Negative, tested more than two months ago, please counsel the patient (Provider initiated HIV counseling and testing) and take blood for HIV testing.')),
                ('baseline_cd4', models.IntegerField(blank=True, null=True, verbose_name='Baseline CD4 counts')),
                ('baseline_viral_load', models.IntegerField(blank=True, null=True, verbose_name='Baseline Viral Load')),
                ('hiv_stage', models.CharField(choices=[('one', 'One (1)'), ('two', 'Two (2)'), ('three', 'Three (3)'), ('four', 'Four (4)'), ('N/A', 'Not applicable')], max_length=45, verbose_name='What is the patient HIV stage?')),
                ('hiv_subtype_done', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Was the patient’s HIV subtype done?')),
                ('hiv_subtype', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Was the patient’s HIV subtype done?')),
                ('drug_resistance_testing_done', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Was the patient’s HIV subtype done?')),
                ('drug_resistance', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, what is the patient’s HIV drug resistance results?')),
                ('treatment_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Hiv Lab Investigation',
                'verbose_name_plural': 'Hiv Lab Investigation',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of this report', validators=[edcs_protocol.validators.datetime_not_before_study_start, edcs_model.models.validators.date.datetime_not_future], verbose_name='Report date and time')),
                ('reason_unscheduled_other', edcs_model.fields.other_charfield.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If the reason for the unscheduled visit is "other", specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed', provide the reason for the missed visit")),
                ('reason_missed_other', edcs_model.fields.other_charfield.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If the reason for the missed visit is "other", specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edcs_model.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edcs_protocol.validators.date_not_before_study_start, edcs_model.models.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('scheduled', 'Scheduled visit (study)'), ('unscheduled', 'Routine / Unscheduled visit (non-study)'), ('missed', 'Missed visit')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('routine_non_study', 'Routine appointment (non-study)'), ('patient_unwell_outpatient', 'Patient unwell'), ('drug_refill', 'Drug refill only'), ('OTHER', 'Other'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name="If 'unscheduled', provide reason for the unscheduled visit")),
                ('clinic_services_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('info_source', models.CharField(choices=[('patient', 'Patient'), ('patient_and_outpatient', 'Patient, hospital notes and/or outpatient card'), ('patient_representive', 'Patient Representative (e.family member, friend)'), ('hospital_notes', 'Hospital notes'), ('outpatient_cards', 'Outpatient cards'), ('collateral_history', 'Collateral History from relative/guardian'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], max_length=25, verbose_name='What is the main source of this information?')),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_appointment.appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical subject visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSignSymptomLungCancer',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('what_brought_hospital_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('symptoms_how_long', models.CharField(choices=[('less_than_1month', 'Less than 1 month'), ('1_3months', '1-3 months'), ('3_6months', '3-6 months'), ('greater_than_6months', '>6 months')], max_length=45, verbose_name='For how long have you been sick with the above symptoms?')),
                ('symptoms_greater_than_6months', models.CharField(blank=True, max_length=45, null=True, verbose_name='If greater than 6 months, Please specify')),
                ('characterize_symptoms', models.CharField(choices=[('sudden_onset', 'Sudden onset'), ('gradual_onset', 'Gradual onset'), ('progressive_severity', 'Progressive in severity'), ('intermittent_severity', 'Intermittent in severity'), ('OTHER', 'Others')], max_length=45, verbose_name='How would you characterize your symptoms?')),
                ('characterize_symptoms_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('family_member_same_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Has anyone else in the family presented with the same symptoms?')),
                ('family_member_relationship', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('brother', 'Brother'), ('sister', 'Sister'), ('grandparent_mother_side', 'Grandparent from mother’s side'), ('grandparent_father_side', 'Grandparent from father’s side'), ('N/A', 'Not applicable'), ('OTHER', 'Others')], default='N/A', max_length=45, verbose_name='If yes, what is your relationship with the above-mentioned person?')),
                ('family_member_relationship_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('chest_radiation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer')], max_length=45, null=True, verbose_name='Do you have history of chest radiation in the past 5 years?')),
                ('no_chest_radiation', models.IntegerField(blank=True, null=True, verbose_name='If yes, how many times?')),
                ('time_take_referred_cancer_facilities', models.IntegerField(help_text='(Ask the patient to show you his/her referral documents. Duration in days)', verbose_name='From the very first time you sought care from the health facility to the time you were referred to the cancer treatment facility, how long did it take?')),
                ('investigations_ordered', models.CharField(choices=[('blood_tests', 'Blood tests'), ('chest_xray', 'Chest X-ray'), ('ct_scan', 'CT scan'), ('lung_cancer_biopsy', 'Lung cancer biopsy'), ('sputum_tb_dx', 'Sputum for TB diagnosis'), ('OTHER', 'Others'), ('none_of_above', 'None of the above')], max_length=45, verbose_name='While at cancer treatment facility, what investigations did the doctor(s) order?')),
                ('investigations_ordered_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('non_investigations_ordered', models.TextField(blank=True, null=True, verbose_name='If none, state reason why?')),
                ('lung_cancer_dx', models.CharField(choices=[('lung_cancer_confirmed', 'Lung cancer confirmed'), ('non_cancerous', 'Non-cancerous'), ('inconclusive_results', 'Inconclusive results')], max_length=45, verbose_name='What is the patient’s lung cancer diagnosis?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Sign Symptoms Lung Cancer',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOccupationalHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('history_working_industries', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer')], max_length=45, verbose_name='Do you have history of working in industries?')),
                ('industries_worked', models.CharField(choices=[('textile_industry', 'Textile industry'), ('chemical_production_industry', 'Chemical production industry'), ('food_processing_industry', 'Food processing industry'), ('drug_industry', 'Drug industry'), ('milling_industry', 'Milling industry'), ('construction_industry', 'Construction industry'), ('N/A', 'Not applicable'), ('OTHER', 'Other')], default='N/A', max_length=45, verbose_name='If yes, what kind of industry did you work?')),
                ('industries_worked_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('history_working_mines', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer')], max_length=45, verbose_name='Do you have history of working in the mines?')),
                ('how_long_work_mine', models.CharField(choices=[('less_than_5yrs', '≤ 5 years'), ('greater_than_5yrs', '≥ 5 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, for how long have worked in the mines?')),
                ('activities_expose_to_smoke', models.TextField(blank=True, null=True, verbose_name='Are there any activities or daily events that expose you to smoke or dust on a daily basis that we have not asked you about, if true list them')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Occupational History',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLungCancerTreatment',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('lung_cancer_stage', models.CharField(choices=[('one', 'One (1)'), ('two', 'Two (2)'), ('three', 'Three (3)'), ('four', 'Four (4)'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='What is the stage of lung cancer?')),
                ('date_start_treatment', models.DateField(blank=True, max_length=45, null=True, verbose_name='Date started Treatment?')),
                ('treatment', models.CharField(choices=[('chemotherapy', 'Chemotherapy'), ('radiation', 'Radiation'), ('surgical_resection', 'Surgical resection'), ('immunotherapy', 'Immunotherapy'), ('tyrosine_kinase_inhibitor', 'Tyrosine kinase inhibitor '), ('1_2above', '1 & 2 above'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Type of treatment?')),
                ('treatment_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Lung Cancer Treatment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLungCancerLabInvestigation',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('biopsy_tissues_mutation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='From the biopsy tissues, is there any mutation?')),
                ('mutation_detected', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, what mutations were detected?')),
                ('dna_methylation_age', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Was the DNA methylation age done?')),
                ('dna_methylation_result', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, what were the DNAm results?')),
                ('brock_score', models.CharField(blank=True, max_length=45, null=True, verbose_name='What was the patient’s Brock score?')),
                ('lungrads_score', models.CharField(blank=True, max_length=45, null=True, verbose_name='What was the patient’s LungRADS score?')),
                ('luniris_score', models.CharField(blank=True, max_length=45, null=True, verbose_name='What was the patient’s LunIRiS score?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Lung Cancer Lab Investigation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalHouseKitchenSurrounding',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('material_floor', models.CharField(choices=[('earth_sand_clay_mud_dung', 'Earth/sand/clay/mud/dung'), ('wood', 'Wood'), ('ceramic_tiles_vinyl', 'Ceramic tiles or vinyl'), ('cement_concrete', 'Cement/concrete'), ('OTHER', 'Other')], max_length=45, verbose_name='What is the main material of the floor of the dwelling?')),
                ('material_roof', models.CharField(choices=[('no_roof', 'No roof'), ('thatch_straw', 'Thatch/straw'), ('mud', 'Mud'), ('metal', 'Metal'), ('wood', 'Wood'), ('brick', 'Brick'), ('tiles', 'Tiles'), ('slate', 'Slate'), ('OTHER', 'Others')], max_length=45, verbose_name='What is the main material of the roof of the dwelling?')),
                ('material_interior_wall', models.CharField(choices=[('no_walls', 'No walls'), ('mud', 'Mud'), ('wood', 'Wood'), ('cement_concrete', 'Cement/concrete'), ('stone', 'Stone'), ('metal', 'Metal'), ('OTHER', 'Others')], max_length=125, verbose_name='What is the main material of the interior walls of the dwelling?')),
                ('material_exterior_wall', models.CharField(choices=[('no_walls', 'No walls'), ('mud', 'Mud'), ('wood', 'Wood'), ('cement_concrete', 'Cement/concrete'), ('stone', 'Stone'), ('metal', 'Metal'), ('OTHER', 'Others')], max_length=15, verbose_name='What is the main material of the exterior walls of the dwelling?')),
                ('inside_swept', models.CharField(choices=[('daily', 'Daily'), ('two_day_week', 'Two days a week'), ('three_day_week', 'Three days a week'), ('four', 'Four'), ('five', 'Five'), ('six', 'Six'), ('weekly', 'Weekly (i.e., once in 7 days)'), ('monthly', 'Monthly'), ('less_one_month', 'Less than once a month'), ('never', 'Never')], max_length=125, verbose_name='How often is the inside of the dwelling swept?')),
                ('material_kitchen_floor', models.CharField(choices=[('earth_sand_clay_mud_dung', 'Earth/sand/clay/mud/dung'), ('wood', 'Wood'), ('ceramic_tiles_vinyl', 'Ceramic tiles or vinyl'), ('cement_concrete', 'Cement/concrete'), ('OTHER', 'Other')], max_length=125, verbose_name='What is the main material of the kitchen floor?')),
                ('material_kitchen_roof', models.CharField(choices=[('no_roof', 'No roof'), ('thatch_straw', 'Thatch/straw'), ('mud', 'Mud'), ('metal', 'Metal'), ('wood', 'Wood'), ('brick', 'Brick'), ('tiles', 'Tiles'), ('slate', 'Slate'), ('OTHER', 'Other')], max_length=125, verbose_name='What is the main material of the kitchen roof?')),
                ('material_interior_wall_kitchen', models.CharField(choices=[('no_roof', 'No roof'), ('thatch_straw', 'Thatch/straw'), ('mud', 'Mud'), ('metal', 'Metal'), ('wood', 'Wood'), ('brick', 'Brick'), ('tiles', 'Tiles'), ('slate', 'Slate'), ('OTHER', 'Others')], max_length=125, verbose_name='What is the main material of the interior walls of your kitchen?')),
                ('material_exterior_wall_kitchen', models.CharField(choices=[('no_walls', 'No walls'), ('mud', 'Mud'), ('wood', 'Wood'), ('cement_concrete', 'Cement/concrete'), ('stone', 'Stone'), ('metal', 'Metal'), ('OTHER', 'Others')], max_length=125, verbose_name='What is the main material of the exterior walls of your kitchen?')),
                ('kitchen_swept', models.CharField(choices=[('daily', 'Daily'), ('two_day_week', 'Two days a week'), ('three_day_week', 'Three days a week'), ('four_day_week', 'Four days a week'), ('five_day_week', 'Five days a week '), ('six_day_week', 'Six days a week'), ('weekly', 'Weekly (i.e., once in 7 days)'), ('monthly', 'Monthly (Once a month)'), ('never', 'Never')], max_length=125, verbose_name='How often is the inside of the kitchen swept?')),
                ('no_kitchen_window', models.IntegerField(verbose_name='How many windows in the kitchen open to outside the house?')),
                ('no_kitchen_door', models.IntegerField(verbose_name='How many doors in the kitchen open to outside the house?')),
                ('kitchen_chimney', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Does the kitchen have a chimney?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical House Kitchen Surrounding',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalHomeLocator',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('ward', models.CharField(max_length=45, verbose_name='Ward')),
                ('village', models.CharField(max_length=45, verbose_name='Village')),
                ('street', models.CharField(max_length=45, verbose_name='Street')),
                ('Kitongoji', models.CharField(max_length=45, verbose_name='Kitongoji')),
                ('Kitongoji_leader', models.CharField(max_length=85, verbose_name='Name of the Kitongoji leader')),
                ('nearest_church_mosque', models.CharField(max_length=45, verbose_name='Name of the nearest church and mosque')),
                ('nearest_healthcare_facility', models.CharField(max_length=125, verbose_name='Name of the nearest healthcare facility')),
                ('famous_person', models.CharField(max_length=125, verbose_name='Name of any person who is famous residing in the neighborhood')),
                ('famous_thing', models.CharField(max_length=125, verbose_name='Name of anything that is famous found in the neighborhood')),
                ('patient_phone_number', models.CharField(max_length=45, verbose_name='Phone number of the patient')),
                ('member_phone_number', models.TextField(max_length=125, verbose_name='Phone number of up to three members of the household')),
                ('close_relatives_phone_number', models.CharField(max_length=125, verbose_name='Phone numbers of other two close relatives')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Home Locator Form',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalHivLabInvestigation',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('hiv_status', models.CharField(choices=[('hiv_positive', 'HIV positive'), ('hiv_negative', 'HIV negative'), ('inconclusive_results', 'Inconclusive results')], max_length=45, verbose_name='If the patient’s status is unknown or Negative, tested more than two months ago, please counsel the patient (Provider initiated HIV counseling and testing) and take blood for HIV testing.')),
                ('baseline_cd4', models.IntegerField(blank=True, null=True, verbose_name='Baseline CD4 counts')),
                ('baseline_viral_load', models.IntegerField(blank=True, null=True, verbose_name='Baseline Viral Load')),
                ('hiv_stage', models.CharField(choices=[('one', 'One (1)'), ('two', 'Two (2)'), ('three', 'Three (3)'), ('four', 'Four (4)'), ('N/A', 'Not applicable')], max_length=45, verbose_name='What is the patient HIV stage?')),
                ('hiv_subtype_done', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Was the patient’s HIV subtype done?')),
                ('hiv_subtype', models.CharField(choices=[('a', 'A'), ('b', 'B'), ('c', 'C'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Was the patient’s HIV subtype done?')),
                ('drug_resistance_testing_done', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Was the patient’s HIV subtype done?')),
                ('drug_resistance', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, what is the patient’s HIV drug resistance results?')),
                ('treatment_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Hiv Lab Investigation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEffectAirPollution',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('family_member_sickness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Has any member of your family had any sickness that made you change the type of fuel you use?')),
                ('who_had_illness', models.CharField(choices=[('child', 'Child'), ('husband', 'Husband'), ('wife', 'Wife'), ('OTHER', 'Other member of the house hold'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, please state, who had the illness')),
                ('fuel_before_changing', models.CharField(blank=True, max_length=125, null=True, verbose_name='If you changed fuel, what fuel were you using before and which fuel did you change to?')),
                ('variation_btn_fuel', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Is there any seasonal variation between primary and secondary fuel used for cooking?')),
                ('influence_variation_btn_fuel', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, Can you tell us how season influences your choice of fuel?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Effect of Air Pollution',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDemographicCharacteristic',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('martial_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Marital status?')),
                ('education', models.CharField(choices=[('never_been_in_school', 'Never been in school'), ('primary_education', 'Completed Primary Education'), ('secondary_education', 'Completed Secondary Education (‘’O’’ or ‘’A’’ level)'), ('vocational_training', 'Vocational training'), ('tertiary_education', 'Tertiary Education'), ('OTHER', 'Other')], max_length=45, verbose_name='Education level?')),
                ('education_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('occupation', models.CharField(choices=[('civil_servant', 'Civil Servant'), ('house_wife', 'House wife'), ('peasant', 'Peasant'), ('petty_trader', 'Petty trader'), ('entrepreneur', 'Entrepreneur'), ('unemployed', 'Unemployed'), ('business_man', 'Business man/woman'), ('OTHER', 'Other')], max_length=45, verbose_name='Occupation')),
                ('occupation_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('electricity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have electricity in your household?')),
                ('television', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have a television in your household?')),
                ('radio', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have a radio in your household?')),
                ('an_iron', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have an Iron in your household?')),
                ('bank_account', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Does anyone in your household own a bank account?')),
                ('material_build_floor', models.CharField(choices=[('soil_sand_mud', 'Soil/ sand/ mud'), ('cement_concrete_tiles', 'Cement/ concrete/ tiles'), ('OTHER', 'Others')], max_length=45, verbose_name='Which materials were used to build the floor in your house?')),
                ('material_build_floor_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('material_build_walls', models.CharField(choices=[('soil_sand_mud', 'There is no wall'), ('cement_concrete_tiles', 'Grass'), ('other', 'Canes/ Palm'), ('trees_mud', 'Trees and mud'), ('stone_mud', 'Stones and mud'), ('wood_timber', 'Wood/timber'), ('cement_concrete_bricks', 'Cement/ concrete blocks/ burnt blocks/bricks.'), ('OTHER', 'Others')], max_length=45, verbose_name='Which materials were used to build the walls of your house?')),
                ('material_build_walls_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('material_build_roof', models.CharField(choices=[('soil_sand_mud', 'Iron sheet/roofing tiles'), ('grass_leaves_soil', 'Grass/ leaves/ palm leaves/ soil'), ('OTHER', 'Others')], max_length=45, verbose_name='Which materials were used for roofing your house?')),
                ('material_build_roof_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('use_in_cooking', models.CharField(choices=[('electricity_stove', 'Electricity stove'), ('gas_stove', 'Gas stove'), ('kerosene_stove', 'Kerosene stove'), ('charcoal', 'Charcoal'), ('logs_woods', 'Logs/woods'), ('grass_leaves', 'Grass/leaves'), ('animal_waste', 'Animal waste'), ('plants_waste', 'Plants waste'), ('dont_cook', 'We do not cook'), ('OTHER', 'Others')], max_length=45, verbose_name='What does your household use in cooking regularly? ')),
                ('use_in_cooking_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('main_power_source', models.CharField(choices=[('electricity', 'Electricity'), ('battery_torch', 'Battery/ torch '), ('solar_energy', 'Solar energy'), ('OTHER', 'Others')], max_length=15, verbose_name='What is the main source of power in your household?')),
                ('main_power_source_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('household_monthly_income', models.IntegerField(help_text='(from ALL sources, including employment, selling crops, extra income etc.)? Amount in shillings', verbose_name='What is the average monthly combined income for the entire household ')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Demographic and Socio-Economic Characteristics',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCovidInfectionHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('think_had_covid', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(if not sure, select No)', max_length=15, verbose_name='Do you know or think that you have had COVID-19?')),
                ('date_think_had_covid', models.DateField(blank=True, max_length=45, null=True, verbose_name='If yes, On what date did you first know or think you had COVID-19?')),
                ('have_covid_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Did you have any symptoms when you first knew or thought you had COVID-19?')),
                ('admitted_hospital', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Were you admitted to hospital when you thought you had COVID-19?')),
                ('swab_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Have you ever had a swab test of your nose and throat to test for COVID-19 infection? ')),
                ('swab_test_results', models.CharField(choices=[('positive_test', 'One or more positive test(s) '), ('negative_test', 'One or more negative tests, but none were positive'), ('all_test_failed', 'All tests failed'), ('waiting_results', 'Waiting for all results'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, What was the result/were the results of all swab tests you’ve had?')),
                ('date_first_positive_test', models.DateField(blank=True, max_length=45, null=True, verbose_name='If any positive test: What was the date of first positive test you’ve had?')),
                ('date_last_negative_test', models.DateField(blank=True, max_length=45, null=True, verbose_name='If all tests negative: What was the date of last negative test you’ve had?')),
                ('covid_vaccinated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Have you ever been vaccinated against COVID-19?')),
                ('covid_vaccine', models.CharField(choices=[('dont_know_type', 'Don’t know type'), ('pfizer_biontech_moderna', 'Pfizer/BioNTech Moderna'), ('oxford_astraZeneca', 'Oxford/AstraZeneca'), ('janssen_johnson_Johnson', 'Janssen\\Johnson&Johnson'), ('novavax', 'Novavax'), ('sinovac', 'Sinovac'), ('sputnik', 'Sputnik'), ('valneva', 'Valneva'), ('sinopharm', 'Sinopharm'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, what type of vaccination')),
                ('vaccine_provider', models.CharField(choices=[('government_uganda', 'Government of Uganda'), ('research_study', 'Research study/trial '), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If Yes who provided the vaccine')),
                ('other_vaccine_provider', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('no_covid_vaccine', models.CharField(choices=[('one', 'One'), ('two', 'Two'), ('three_more', 'Three or More'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How many doses have you received to date?')),
                ('date_recent_vaccination', models.DateField(blank=True, max_length=45, null=True, verbose_name='Date of most recent vaccination?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Covid Infection History',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCookingFuel',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('main_use_cooking', models.CharField(choices=[('electricity', 'Electricity'), ('lpg_natural_gas ', 'LPG/Natural gas '), ('biogas ', 'Biogas '), ('kerosene', 'Kerosene'), ('coal_lignite', 'Coal/lignite'), ('charcoal', 'Charcoal'), ('wood', 'Wood'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other'), ('no_food_cooked', 'No food cooked in household')], max_length=45, verbose_name='What type of fuel does your household MAINLY use for cooking?')),
                ('main_use_cooking_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('main_reason_use', models.CharField(choices=[('Economical', 'Economical'), ('Convenient', 'Convenient'), ('easily_available', 'Easily available'), ('good_health', 'Good for health'), ('looks_better', 'Looks better')], max_length=125, verbose_name='What is the MAIN reason why you use this?')),
                ('cooking_done', models.CharField(choices=[('in_house', 'In the house'), ('separate_building', 'In a separate building'), ('outdoors', 'Outdoors'), ('OTHER', 'Other')], max_length=45, verbose_name='Where is the cooking usually done?')),
                ('cooking_done_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('no_cooking_household', models.IntegerField(verbose_name='How many times does your household typically cook in a day?')),
                ('sleep_where_cook', models.CharField(choices=[('yes_all_times', 'Yes, all the times'), ('yes_sometimes', 'Yes, sometimes'), ('no', 'No')], max_length=45, verbose_name='Do you sleep in the same room where you cook?')),
                ('use_wood', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use wood to cook?')),
                ('use_wood_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use wood per month?')),
                ('use_kerosene', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use kerosene to cook?')),
                ('use_kerosene_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use kerosene per month?')),
                ('use_charcoal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use charcoal to cook?')),
                ('use_charcoal_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use charcoal per month?')),
                ('use_coal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use coal/ignite to cook')),
                ('use_coal_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use coal/ignite per month?')),
                ('use_straw', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use straw/shrubs/grass to cook?')),
                ('use_straw_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use straw/shrubs/grass per month?')),
                ('use_electricity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use electricity to cook?')),
                ('use_electricity_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use electricity per month?')),
                ('use_biogas', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use biogas for cook?')),
                ('use_biogas_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use biogas per month?')),
                ('use_dung', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use animal dung to cook?')),
                ('use_dung_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use animal dung per month?')),
                ('use_paper', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use paper to cook?')),
                ('use_paper_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use paper per month?')),
                ('use_polythene', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use polythene to cook?')),
                ('use_polythene_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use polythene per month?')),
                ('use_burn_crops', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you often burn crops, wood, rubbish, polythene or other materials in the open?')),
                ('distance_from_neighbor', models.IntegerField(verbose_name='Estimate the distance from your household to your nearest neighbor in meters?')),
                ('neighbor_use_cooking', models.CharField(choices=[('electricity', 'Electricity'), ('lpg_natural_gas ', 'LPG/Natural gas '), ('biogas ', 'Biogas '), ('kerosene', 'Kerosene'), ('coal_lignite', 'Coal/lignite'), ('charcoal', 'Charcoal'), ('wood', 'Wood'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other'), ('dont_know', 'I dont know')], max_length=45, verbose_name='What is the MAIN type of fuel that most of your neighbors use?')),
                ('neighbor_use_cooking_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('smoke_from_neighbor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Does smoke from your neighbors cooking enter your house?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Cooking Fuel',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalContraceptiveUseReproductiveHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('age_attain_menarche', models.CharField(choices=[('less_than_12yrs', '≤ 12 years'), ('12_13yrs', '12-13 years'), ('14_15yrs', '14-15 years'), ('greater_than_16yrs', '≥ 16 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='At what age did you attain your menarche?')),
                ('age_have_first_child', models.CharField(choices=[('nulliparous', 'Nulliparous'), ('less_than_20yrs', '≤ 20years'), ('20_29yrs', '20-29 years'), ('30_39yrs', '30-39 years'), ('greater_than_39yrs', '≥ 39 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='At what age did you have your first child?')),
                ('age_have_last_child', models.CharField(choices=[('nulliparous', 'Nulliparous'), ('less_than_25yrs', '≤ 25years'), ('25_29_yrs', '25-29 years'), ('30_39yrs', '30-39 years'), ('greater_than_39yrs', '≥ 39 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='At what age did you have your last child?')),
                ('breast_feed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Have you ever breast fed?')),
                ('use_oral_contraceptives', models.CharField(choices=[('yes_current_user', 'Yes, Current user'), ('yes_past_user', 'Yes, Past user'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Have you ever used oral contraceptives?')),
                ('how_long_use_oral_contraceptives', models.CharField(choices=[('less_than_5yrs', '≤ 5 years'), ('greater_than_5yrs', '≥ 5 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how long have you been using oral contraceptives?')),
                ('when_stop_use_contraceptives', models.CharField(choices=[('less_than_5yrs_ago', '≤ 5 years ago'), ('greater_than_5yrs_ago', '≥ 5 years ago'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='For those who have stopped using oral contraceptive, when did you stop?')),
                ('post_menopausal_hormone_therapy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Have you ever used post-menopausal hormone therapy?')),
                ('how_long_post_menopausal_hormone_therapy', models.CharField(choices=[('less_than_5yrs', '≤ 5 years'), ('greater_than_5yrs', '≥ 5 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how long have you been using/ have you used post-menopausal therapy?')),
                ('how_long_stop_post_menopausal_hormone_therapy', models.CharField(choices=[('less_than_5yrs_ago', '≤ 5 years ago'), ('greater_than_5yrs_ago', '≥ 5 years ago'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='For those who have stopped using post-menopausal hormone therapy, when did you stop using post-menopausal therapy?')),
                ('age_attain_menopause', models.CharField(choices=[('less_than_46yrs', '≤ 46 years'), ('46_50yrs', '46-50 years'), ('greater_than_51yrs', '≥ 51 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='For menopausal women, at what age did you attain menopause?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Contraceptive Use Reproductive History',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalClinicalReview',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Have you ever been tested for HIV?')),
                ('hiv_test_date', models.DateField(blank=True, null=True, verbose_name='If yes, when was your most recent HIV test?')),
                ('hiv_dx', models.CharField(choices=[('POS', 'HIV Positive '), ('NEG', 'HIV Negative'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'I dont know'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='What was the result of your most recent HIV test?')),
                ('arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If positive, are you taking ARVs?')),
                ('arv_start_date', models.DateField(blank=True, null=True, verbose_name='Month and year patient started taking ARVs?')),
                ('arv_regularly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Do you take your ARVs regularly? ')),
                ('miss_taking_arv', models.CharField(choices=[('at_least_once_every_week', 'At least once every week'), ('at_least_once_a_month', 'At least once in a month'), ('at_least_once_3_months', 'At least once in 3 months'), ('at_least_once_a_year', 'At least once a year'), ('dont_remember', 'I Do not remember'), ('OTHER', 'Other'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If no, how often do you miss taking ARVs?')),
                ('miss_taking_arv_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('lung_diseases_dx', models.CharField(choices=[('yes_copd', 'Yes, COPD'), ('yes_asthma', 'Yes, Asthma'), ('yes_interstitial_lung_disease', 'Yes, Interstitial Lung Disease'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Have you ever been diagnosed with a chronic lung disease like Asthma, COPD, and Interstitial lung disease?')),
                ('copd_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes COPD, when were you diagnosed?')),
                ('asthma_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes Asthma, when were you diagnosed?')),
                ('interstitial_lung_disease_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes Interstitial Lung Disease, when were you diagnosed?')),
                ('use_lung_diseases_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=80, verbose_name='Are you using any medications?')),
                ('lung_diseases_medication', models.TextField(blank=True, null=True, verbose_name='If is yes, what medications are you using?')),
                ('htn_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Have you ever been diagnosed with Hypertension?')),
                ('htn_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes, when were you diagnosed?')),
                ('use_htn_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Are you using any medications?')),
                ('htn_medication', models.TextField(blank=True, null=True, verbose_name='If yes, what are you using currently?')),
                ('dm_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Have you ever been diagnosed with have Diabetes Mellitus? ')),
                ('dm_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes, when were you diagnosed?')),
                ('use_dm_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Are you using any medications?')),
                ('dm_medication', models.TextField(blank=True, null=True, verbose_name='If is yes, what medications are you using currently?')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Clinical Review',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCancerHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('cancer_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('family_history_unknown', 'Family history unknown')], max_length=45, verbose_name='Has any member of your close family been diagnosed with either breast cancer, colon cancer, lung cancer, ovarian cancer, prostate cancer, thyroid or uterine cancer?')),
                ('breast_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Breast Cancer')),
                ('breast_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('breast_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('colon_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Colon Cancer')),
                ('colon_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('colon_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('lung_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Lung Cancer')),
                ('lung_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('lung_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('ovarian_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Ovarian Cancer')),
                ('ovarian_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('ovarian_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('prostate_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Prostate Cancer')),
                ('prostate_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('prostate_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('thyroid_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Thyroid Cancer')),
                ('thyroid_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('thyroid_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('uterine_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Uterine Cancer')),
                ('uterine_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('uterine_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Cancer History',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAlcoholTobaccoUse',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('smoke_tobacco', models.CharField(choices=[('yes_current_smoker', 'Yes, Current smoker'), ('yes_past_smoker', 'Yes, past smoker'), ('NEVER', 'Never')], max_length=45, verbose_name='Do you smoke tobacco products?')),
                ('tobacco_product', models.CharField(choices=[('yes_cigarettes', 'Yes, Cigarettes'), ('yes_cigars', 'Yes, Cigars'), ('yes_shisha', 'Yes, Shisha'), ('yes_pipes', 'Yes, pipes'), ('none_of_above', 'None of the above'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If currently/past smoker, which tobacco products do you/ did you smoke.')),
                ('date_start_smoking', models.DateField(blank=True, null=True, verbose_name='Month and Year Patient started smoking tobacco products')),
                ('smoking_frequency', models.CharField(choices=[('daily', 'Daily'), ('every_other_day', 'Every other day'), ('weekly', 'Weekly (Not daily)'), ('monthly', 'Monthly(Not weekly)'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How frequently do you smoke these products?')),
                ('smoking_frequency_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('no_tobacco_product_smoked', models.IntegerField(blank=True, null=True, verbose_name='On average, how many of these products do you/did you smoke?')),
                ('age_start_smoking', models.IntegerField(blank=True, help_text='in years', null=True, verbose_name='If past smoker, at what age did you first start smoking?')),
                ('age_stop_smoking', models.IntegerField(blank=True, help_text='in years', null=True, verbose_name='If past smoker, at what age did you stop smoking?')),
                ('someone_else_smoke', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Is there anyone in your home/work places who smoke cigarette, cigars, shisha and pipes')),
                ('smoke_inside_house', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('less_than_monthly', 'Less than monthly'), ('never', 'Never'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How often does anyone smoke inside your house?')),
                ('smoke_inside_house_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('consume_alcohol', models.CharField(choices=[('yes_current_consumer', 'Yes, Current consumer'), ('yes_past_consumer', 'Yes, past consumer'), ('NEVER', 'Never')], max_length=45, verbose_name='Do you consume alcohol?')),
                ('alcohol_consumption_frequency', models.CharField(choices=[('daily', '1-Daily'), ('every_other_day', 'Every other day'), ('weekly', 'Weekly (Not daily )'), ('monthly', 'Monthly (Not weekly)'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How frequently do you consume alcohol?')),
                ('alcohol_consumption_frequency_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Alcohol Tobacco Use',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAirPollutionFollowUp',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('hour_wear_device', models.IntegerField(verbose_name='In the past 48 hours how many hours did you wear devices?')),
                ('fuel_type_used', models.CharField(choices=[('electricity', 'Electricity'), ('lpg_natural_gas ', 'LPG/Natural gas '), ('biogas ', 'Biogas '), ('kerosene', 'Kerosene'), ('coal_lignite', 'Coal/lignite'), ('charcoal', 'Charcoal'), ('wood', 'Wood'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='What type of fuel did you use for cooking since we visited your home yesterday')),
                ('fuel_type_used_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('stove_type_used', models.CharField(choices=[('kerosene_stove', 'Kerosene stove'), ('gas_stove', 'Gas stove'), ('open_fire', 'Open fire'), ('open_fire_stove', 'Open fire or stove with chimney or hood'), ('close_stove', 'Closed stove with chimney'), ('electric_heaters', 'Electric heaters'), ('OTHER', 'Other')], max_length=125, verbose_name='What type of stove did you use for cooking since we visited your home yesterday?')),
                ('stove_type_used_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('pollution_readings', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='What is the air pollution readings')),
                ('gps_coordinates', models.TextField(max_length=125, verbose_name='Record GPS coordinates of the patient’s home using the nearest physical feature on the google map')),
                ('distance_health_facility', models.DecimalField(decimal_places=2, help_text='(in km)', max_digits=4, verbose_name='Distance from patient’s home to the health facility')),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical Air Pollution Follow Up',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='EffectAirPollution',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('family_member_sickness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Has any member of your family had any sickness that made you change the type of fuel you use?')),
                ('who_had_illness', models.CharField(choices=[('child', 'Child'), ('husband', 'Husband'), ('wife', 'Wife'), ('OTHER', 'Other member of the house hold'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, please state, who had the illness')),
                ('fuel_before_changing', models.CharField(blank=True, max_length=125, null=True, verbose_name='If you changed fuel, what fuel were you using before and which fuel did you change to?')),
                ('variation_btn_fuel', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Is there any seasonal variation between primary and secondary fuel used for cooking?')),
                ('influence_variation_btn_fuel', models.CharField(blank=True, max_length=125, null=True, verbose_name='If yes, Can you tell us how season influences your choice of fuel?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Effect of Air Pollution',
                'verbose_name_plural': 'Effect of Air Pollution',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='DemographicCharacteristic',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('martial_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Marital status?')),
                ('education', models.CharField(choices=[('never_been_in_school', 'Never been in school'), ('primary_education', 'Completed Primary Education'), ('secondary_education', 'Completed Secondary Education (‘’O’’ or ‘’A’’ level)'), ('vocational_training', 'Vocational training'), ('tertiary_education', 'Tertiary Education'), ('OTHER', 'Other')], max_length=45, verbose_name='Education level?')),
                ('education_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('occupation', models.CharField(choices=[('civil_servant', 'Civil Servant'), ('house_wife', 'House wife'), ('peasant', 'Peasant'), ('petty_trader', 'Petty trader'), ('entrepreneur', 'Entrepreneur'), ('unemployed', 'Unemployed'), ('business_man', 'Business man/woman'), ('OTHER', 'Other')], max_length=45, verbose_name='Occupation')),
                ('occupation_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('electricity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have electricity in your household?')),
                ('television', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have a television in your household?')),
                ('radio', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have a radio in your household?')),
                ('an_iron', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Do you have an Iron in your household?')),
                ('bank_account', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Does anyone in your household own a bank account?')),
                ('material_build_floor', models.CharField(choices=[('soil_sand_mud', 'Soil/ sand/ mud'), ('cement_concrete_tiles', 'Cement/ concrete/ tiles'), ('OTHER', 'Others')], max_length=45, verbose_name='Which materials were used to build the floor in your house?')),
                ('material_build_floor_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('material_build_walls', models.CharField(choices=[('soil_sand_mud', 'There is no wall'), ('cement_concrete_tiles', 'Grass'), ('other', 'Canes/ Palm'), ('trees_mud', 'Trees and mud'), ('stone_mud', 'Stones and mud'), ('wood_timber', 'Wood/timber'), ('cement_concrete_bricks', 'Cement/ concrete blocks/ burnt blocks/bricks.'), ('OTHER', 'Others')], max_length=45, verbose_name='Which materials were used to build the walls of your house?')),
                ('material_build_walls_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('material_build_roof', models.CharField(choices=[('soil_sand_mud', 'Iron sheet/roofing tiles'), ('grass_leaves_soil', 'Grass/ leaves/ palm leaves/ soil'), ('OTHER', 'Others')], max_length=45, verbose_name='Which materials were used for roofing your house?')),
                ('material_build_roof_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('use_in_cooking', models.CharField(choices=[('electricity_stove', 'Electricity stove'), ('gas_stove', 'Gas stove'), ('kerosene_stove', 'Kerosene stove'), ('charcoal', 'Charcoal'), ('logs_woods', 'Logs/woods'), ('grass_leaves', 'Grass/leaves'), ('animal_waste', 'Animal waste'), ('plants_waste', 'Plants waste'), ('dont_cook', 'We do not cook'), ('OTHER', 'Others')], max_length=45, verbose_name='What does your household use in cooking regularly? ')),
                ('use_in_cooking_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('main_power_source', models.CharField(choices=[('electricity', 'Electricity'), ('battery_torch', 'Battery/ torch '), ('solar_energy', 'Solar energy'), ('OTHER', 'Others')], max_length=15, verbose_name='What is the main source of power in your household?')),
                ('main_power_source_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('household_monthly_income', models.IntegerField(help_text='(from ALL sources, including employment, selling crops, extra income etc.)? Amount in shillings', verbose_name='What is the average monthly combined income for the entire household ')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Demographic and Socio-Economic Characteristics',
                'verbose_name_plural': 'Demographic and Socio-Economic Characteristics',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='CovidInfectionHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('think_had_covid', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='(if not sure, select No)', max_length=15, verbose_name='Do you know or think that you have had COVID-19?')),
                ('date_think_had_covid', models.DateField(blank=True, max_length=45, null=True, verbose_name='If yes, On what date did you first know or think you had COVID-19?')),
                ('have_covid_symptoms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Did you have any symptoms when you first knew or thought you had COVID-19?')),
                ('admitted_hospital', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Were you admitted to hospital when you thought you had COVID-19?')),
                ('swab_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Have you ever had a swab test of your nose and throat to test for COVID-19 infection? ')),
                ('swab_test_results', models.CharField(choices=[('positive_test', 'One or more positive test(s) '), ('negative_test', 'One or more negative tests, but none were positive'), ('all_test_failed', 'All tests failed'), ('waiting_results', 'Waiting for all results'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, What was the result/were the results of all swab tests you’ve had?')),
                ('date_first_positive_test', models.DateField(blank=True, max_length=45, null=True, verbose_name='If any positive test: What was the date of first positive test you’ve had?')),
                ('date_last_negative_test', models.DateField(blank=True, max_length=45, null=True, verbose_name='If all tests negative: What was the date of last negative test you’ve had?')),
                ('covid_vaccinated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Have you ever been vaccinated against COVID-19?')),
                ('covid_vaccine', models.CharField(choices=[('dont_know_type', 'Don’t know type'), ('pfizer_biontech_moderna', 'Pfizer/BioNTech Moderna'), ('oxford_astraZeneca', 'Oxford/AstraZeneca'), ('janssen_johnson_Johnson', 'Janssen\\Johnson&Johnson'), ('novavax', 'Novavax'), ('sinovac', 'Sinovac'), ('sputnik', 'Sputnik'), ('valneva', 'Valneva'), ('sinopharm', 'Sinopharm'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, what type of vaccination')),
                ('vaccine_provider', models.CharField(choices=[('government_uganda', 'Government of Uganda'), ('research_study', 'Research study/trial '), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If Yes who provided the vaccine')),
                ('other_vaccine_provider', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('no_covid_vaccine', models.CharField(choices=[('one', 'One'), ('two', 'Two'), ('three_more', 'Three or More'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How many doses have you received to date?')),
                ('date_recent_vaccination', models.DateField(blank=True, max_length=45, null=True, verbose_name='Date of most recent vaccination?')),
                ('covid_symptoms', models.ManyToManyField(blank=True, null=True, related_name='covid_symptoms', to='edcs_lists.CovidSymptoms', verbose_name='If yes, what symptoms did you have when you first had COVID-19?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Covid Infection History',
                'verbose_name_plural': 'Covid Infection History',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='CookingFuel',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('main_use_cooking', models.CharField(choices=[('electricity', 'Electricity'), ('lpg_natural_gas ', 'LPG/Natural gas '), ('biogas ', 'Biogas '), ('kerosene', 'Kerosene'), ('coal_lignite', 'Coal/lignite'), ('charcoal', 'Charcoal'), ('wood', 'Wood'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other'), ('no_food_cooked', 'No food cooked in household')], max_length=45, verbose_name='What type of fuel does your household MAINLY use for cooking?')),
                ('main_use_cooking_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('main_reason_use', models.CharField(choices=[('Economical', 'Economical'), ('Convenient', 'Convenient'), ('easily_available', 'Easily available'), ('good_health', 'Good for health'), ('looks_better', 'Looks better')], max_length=125, verbose_name='What is the MAIN reason why you use this?')),
                ('cooking_done', models.CharField(choices=[('in_house', 'In the house'), ('separate_building', 'In a separate building'), ('outdoors', 'Outdoors'), ('OTHER', 'Other')], max_length=45, verbose_name='Where is the cooking usually done?')),
                ('cooking_done_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('no_cooking_household', models.IntegerField(verbose_name='How many times does your household typically cook in a day?')),
                ('sleep_where_cook', models.CharField(choices=[('yes_all_times', 'Yes, all the times'), ('yes_sometimes', 'Yes, sometimes'), ('no', 'No')], max_length=45, verbose_name='Do you sleep in the same room where you cook?')),
                ('use_wood', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use wood to cook?')),
                ('use_wood_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use wood per month?')),
                ('use_kerosene', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use kerosene to cook?')),
                ('use_kerosene_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use kerosene per month?')),
                ('use_charcoal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use charcoal to cook?')),
                ('use_charcoal_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use charcoal per month?')),
                ('use_coal', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use coal/ignite to cook')),
                ('use_coal_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use coal/ignite per month?')),
                ('use_straw', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use straw/shrubs/grass to cook?')),
                ('use_straw_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use straw/shrubs/grass per month?')),
                ('use_electricity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use electricity to cook?')),
                ('use_electricity_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use electricity per month?')),
                ('use_biogas', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use biogas for cook?')),
                ('use_biogas_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use biogas per month?')),
                ('use_dung', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use animal dung to cook?')),
                ('use_dung_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use animal dung per month?')),
                ('use_paper', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use paper to cook?')),
                ('use_paper_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use paper per month?')),
                ('use_polythene', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you use polythene to cook?')),
                ('use_polythene_per_month', models.CharField(choices=[('25_days_month', 'At least 25% of the days in a month'), ('25_50_days_month', '25%-50% of the days in a month'), ('50_70_days_month', '50-75% of the days in a month'), ('75_100_days_month', '75%-100% of the days in a month'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how many times do you use polythene per month?')),
                ('use_burn_crops', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Do you often burn crops, wood, rubbish, polythene or other materials in the open?')),
                ('distance_from_neighbor', models.IntegerField(verbose_name='Estimate the distance from your household to your nearest neighbor in meters?')),
                ('neighbor_use_cooking', models.CharField(choices=[('electricity', 'Electricity'), ('lpg_natural_gas ', 'LPG/Natural gas '), ('biogas ', 'Biogas '), ('kerosene', 'Kerosene'), ('coal_lignite', 'Coal/lignite'), ('charcoal', 'Charcoal'), ('wood', 'Wood'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other'), ('dont_know', 'I dont know')], max_length=45, verbose_name='What is the MAIN type of fuel that most of your neighbors use?')),
                ('neighbor_use_cooking_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('smoke_from_neighbor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Does smoke from your neighbors cooking enter your house?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Cooking Fuel',
                'verbose_name_plural': 'Cooking Fuel',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContraceptiveUseReproductiveHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('age_attain_menarche', models.CharField(choices=[('less_than_12yrs', '≤ 12 years'), ('12_13yrs', '12-13 years'), ('14_15yrs', '14-15 years'), ('greater_than_16yrs', '≥ 16 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='At what age did you attain your menarche?')),
                ('age_have_first_child', models.CharField(choices=[('nulliparous', 'Nulliparous'), ('less_than_20yrs', '≤ 20years'), ('20_29yrs', '20-29 years'), ('30_39yrs', '30-39 years'), ('greater_than_39yrs', '≥ 39 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='At what age did you have your first child?')),
                ('age_have_last_child', models.CharField(choices=[('nulliparous', 'Nulliparous'), ('less_than_25yrs', '≤ 25years'), ('25_29_yrs', '25-29 years'), ('30_39yrs', '30-39 years'), ('greater_than_39yrs', '≥ 39 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='At what age did you have your last child?')),
                ('breast_feed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Have you ever breast fed?')),
                ('use_oral_contraceptives', models.CharField(choices=[('yes_current_user', 'Yes, Current user'), ('yes_past_user', 'Yes, Past user'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Have you ever used oral contraceptives?')),
                ('how_long_use_oral_contraceptives', models.CharField(choices=[('less_than_5yrs', '≤ 5 years'), ('greater_than_5yrs', '≥ 5 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how long have you been using oral contraceptives?')),
                ('when_stop_use_contraceptives', models.CharField(choices=[('less_than_5yrs_ago', '≤ 5 years ago'), ('greater_than_5yrs_ago', '≥ 5 years ago'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='For those who have stopped using oral contraceptive, when did you stop?')),
                ('post_menopausal_hormone_therapy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Have you ever used post-menopausal hormone therapy?')),
                ('how_long_post_menopausal_hormone_therapy', models.CharField(choices=[('less_than_5yrs', '≤ 5 years'), ('greater_than_5yrs', '≥ 5 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If yes, how long have you been using/ have you used post-menopausal therapy?')),
                ('how_long_stop_post_menopausal_hormone_therapy', models.CharField(choices=[('less_than_5yrs_ago', '≤ 5 years ago'), ('greater_than_5yrs_ago', '≥ 5 years ago'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='For those who have stopped using post-menopausal hormone therapy, when did you stop using post-menopausal therapy?')),
                ('age_attain_menopause', models.CharField(choices=[('less_than_46yrs', '≤ 46 years'), ('46_50yrs', '46-50 years'), ('greater_than_51yrs', '≥ 51 years'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='For menopausal women, at what age did you attain menopause?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Contraceptive Use Reproductive History',
                'verbose_name_plural': 'Contraceptive Use Reproductive History',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClinicalReview',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Have you ever been tested for HIV?')),
                ('hiv_test_date', models.DateField(blank=True, null=True, verbose_name='If yes, when was your most recent HIV test?')),
                ('hiv_dx', models.CharField(choices=[('POS', 'HIV Positive '), ('NEG', 'HIV Negative'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'I dont know'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='What was the result of your most recent HIV test?')),
                ('arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If positive, are you taking ARVs?')),
                ('arv_start_date', models.DateField(blank=True, null=True, verbose_name='Month and year patient started taking ARVs?')),
                ('arv_regularly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Do you take your ARVs regularly? ')),
                ('miss_taking_arv', models.CharField(choices=[('at_least_once_every_week', 'At least once every week'), ('at_least_once_a_month', 'At least once in a month'), ('at_least_once_3_months', 'At least once in 3 months'), ('at_least_once_a_year', 'At least once a year'), ('dont_remember', 'I Do not remember'), ('OTHER', 'Other'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If no, how often do you miss taking ARVs?')),
                ('miss_taking_arv_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('lung_diseases_dx', models.CharField(choices=[('yes_copd', 'Yes, COPD'), ('yes_asthma', 'Yes, Asthma'), ('yes_interstitial_lung_disease', 'Yes, Interstitial Lung Disease'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('dont_know', 'Do not know')], max_length=45, verbose_name='Have you ever been diagnosed with a chronic lung disease like Asthma, COPD, and Interstitial lung disease?')),
                ('copd_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes COPD, when were you diagnosed?')),
                ('asthma_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes Asthma, when were you diagnosed?')),
                ('interstitial_lung_disease_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes Interstitial Lung Disease, when were you diagnosed?')),
                ('use_lung_diseases_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=80, verbose_name='Are you using any medications?')),
                ('lung_diseases_medication', models.TextField(blank=True, null=True, verbose_name='If is yes, what medications are you using?')),
                ('htn_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=45, verbose_name='Have you ever been diagnosed with Hypertension?')),
                ('htn_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes, when were you diagnosed?')),
                ('use_htn_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='Are you using any medications?')),
                ('htn_medication', models.TextField(blank=True, null=True, verbose_name='If yes, what are you using currently?')),
                ('dm_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Have you ever been diagnosed with have Diabetes Mellitus? ')),
                ('dm_dx_date', models.DateField(blank=True, null=True, verbose_name='If yes, when were you diagnosed?')),
                ('use_dm_medication', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('decline_to_answer', 'Decline to answer'), ('N/A', 'Not applicable')], max_length=45, verbose_name='Are you using any medications?')),
                ('dm_medication', models.TextField(blank=True, null=True, verbose_name='If is yes, what medications are you using currently?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Clinical Review',
                'verbose_name_plural': 'Clinical Reviews',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='CancerHistory',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('cancer_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('family_history_unknown', 'Family history unknown')], max_length=45, verbose_name='Has any member of your close family been diagnosed with either breast cancer, colon cancer, lung cancer, ovarian cancer, prostate cancer, thyroid or uterine cancer?')),
                ('breast_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Breast Cancer')),
                ('breast_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('breast_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('colon_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Colon Cancer')),
                ('colon_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('colon_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('lung_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Lung Cancer')),
                ('lung_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('lung_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('ovarian_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Ovarian Cancer')),
                ('ovarian_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('ovarian_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('prostate_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Prostate Cancer')),
                ('prostate_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('prostate_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('thyroid_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Thyroid Cancer')),
                ('thyroid_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('thyroid_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('uterine_cancer', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='Uterine Cancer')),
                ('uterine_cancer_age_dx', models.IntegerField(blank=True, null=True, verbose_name='Indicate age of diagnosis')),
                ('uterine_cancer_family_member_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('breast_cancer_family_member', models.ManyToManyField(blank=True, related_name='breast_cancer_family_member', to='edcs_lists.FamilyMembers', verbose_name='What is your relationship?')),
                ('colon_cancer_family_member', models.ManyToManyField(blank=True, related_name='colon_cancer_family_member', to='edcs_lists.FamilyMembers', verbose_name='What is your relationship?')),
                ('lung_cancer_family_member', models.ManyToManyField(blank=True, related_name='lung_cancer_family_member', to='edcs_lists.FamilyMembers', verbose_name='What is your relationship?')),
                ('ovarian_cancer_family_member', models.ManyToManyField(blank=True, related_name='ovarian_cancer_family_member', to='edcs_lists.FamilyMembers', verbose_name='What is your relationship?')),
                ('prostate_cancer_family_member', models.ManyToManyField(blank=True, related_name='prostate_cancer_family_member', to='edcs_lists.FamilyMembers', verbose_name='What is your relationship?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
                ('thyroid_cancer_family_member', models.ManyToManyField(blank=True, related_name='thyroid_cancer_family_member', to='edcs_lists.FamilyMembers', verbose_name='What is your relationship?')),
                ('uterine_cancer_family_member', models.ManyToManyField(blank=True, related_name='uterine_cancer_family_member', to='edcs_lists.FamilyMembers', verbose_name='What is your relationship?')),
            ],
            options={
                'verbose_name': 'Cancer History',
                'verbose_name_plural': 'Cancer History',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlcoholTobaccoUse',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('smoke_tobacco', models.CharField(choices=[('yes_current_smoker', 'Yes, Current smoker'), ('yes_past_smoker', 'Yes, past smoker'), ('NEVER', 'Never')], max_length=45, verbose_name='Do you smoke tobacco products?')),
                ('tobacco_product', models.CharField(choices=[('yes_cigarettes', 'Yes, Cigarettes'), ('yes_cigars', 'Yes, Cigars'), ('yes_shisha', 'Yes, Shisha'), ('yes_pipes', 'Yes, pipes'), ('none_of_above', 'None of the above'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='If currently/past smoker, which tobacco products do you/ did you smoke.')),
                ('date_start_smoking', models.DateField(blank=True, null=True, verbose_name='Month and Year Patient started smoking tobacco products')),
                ('smoking_frequency', models.CharField(choices=[('daily', 'Daily'), ('every_other_day', 'Every other day'), ('weekly', 'Weekly (Not daily)'), ('monthly', 'Monthly(Not weekly)'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How frequently do you smoke these products?')),
                ('smoking_frequency_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('no_tobacco_product_smoked', models.IntegerField(blank=True, null=True, verbose_name='On average, how many of these products do you/did you smoke?')),
                ('age_start_smoking', models.IntegerField(blank=True, help_text='in years', null=True, verbose_name='If past smoker, at what age did you first start smoking?')),
                ('age_stop_smoking', models.IntegerField(blank=True, help_text='in years', null=True, verbose_name='If past smoker, at what age did you stop smoking?')),
                ('someone_else_smoke', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, verbose_name='Is there anyone in your home/work places who smoke cigarette, cigars, shisha and pipes')),
                ('smoke_inside_house', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('less_than_monthly', 'Less than monthly'), ('never', 'Never'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How often does anyone smoke inside your house?')),
                ('smoke_inside_house_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('consume_alcohol', models.CharField(choices=[('yes_current_consumer', 'Yes, Current consumer'), ('yes_past_consumer', 'Yes, past consumer'), ('NEVER', 'Never')], max_length=45, verbose_name='Do you consume alcohol?')),
                ('alcohol_consumption_frequency', models.CharField(choices=[('daily', '1-Daily'), ('every_other_day', 'Every other day'), ('weekly', 'Weekly (Not daily )'), ('monthly', 'Monthly (Not weekly)'), ('OTHER', 'Others'), ('N/A', 'Not applicable')], default='N/A', max_length=45, verbose_name='How frequently do you consume alcohol?')),
                ('alcohol_consumption_frequency_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Alcohol Tobacco Use',
                'verbose_name_plural': 'Alcohol Tobacco Use',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='AirPollutionFollowUp',
            fields=[
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('created', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('modified', models.DateTimeField(blank=True, default=django_audit_fields.models.audit_model_mixin.utcnow)),
                ('user_created', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', django_audit_fields.fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', django_audit_fields.fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', django_audit_fields.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('crf_status', models.CharField(choices=[('INCOMPLETE', 'Incomplete (some data pending)'), ('COMPLETE', 'Complete')], default='INCOMPLETE', help_text='If some data is still pending, flag this CRF as incomplete', max_length=25, verbose_name='CRF status')),
                ('crf_status_comments', models.TextField(blank=True, help_text='for example, why some data is still pending', null=True, verbose_name='Any comments related to status of this CRF')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edcs_utils.date.get_utcnow, help_text='Date and time of report.', verbose_name='Report Date and Time')),
                ('hour_wear_device', models.IntegerField(verbose_name='In the past 48 hours how many hours did you wear devices?')),
                ('fuel_type_used', models.CharField(choices=[('electricity', 'Electricity'), ('lpg_natural_gas ', 'LPG/Natural gas '), ('biogas ', 'Biogas '), ('kerosene', 'Kerosene'), ('coal_lignite', 'Coal/lignite'), ('charcoal', 'Charcoal'), ('wood', 'Wood'), ('straw_shrubs_grass ', 'Straw/shrubs/grass '), ('agricultural_crop', 'Agricultural crop'), ('animal_dung', 'Animal dung'), ('OTHER', 'Other')], max_length=45, verbose_name='What type of fuel did you use for cooking since we visited your home yesterday')),
                ('fuel_type_used_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('stove_type_used', models.CharField(choices=[('kerosene_stove', 'Kerosene stove'), ('gas_stove', 'Gas stove'), ('open_fire', 'Open fire'), ('open_fire_stove', 'Open fire or stove with chimney or hood'), ('close_stove', 'Closed stove with chimney'), ('electric_heaters', 'Electric heaters'), ('OTHER', 'Other')], max_length=125, verbose_name='What type of stove did you use for cooking since we visited your home yesterday?')),
                ('stove_type_used_other', edcs_model.models.fields.other_charfield.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If other, please specify ...')),
                ('pollution_readings', models.DecimalField(decimal_places=4, max_digits=6, verbose_name='What is the air pollution readings')),
                ('gps_coordinates', models.TextField(max_length=125, verbose_name='Record GPS coordinates of the patient’s home using the nearest physical feature on the google map')),
                ('distance_health_facility', models.DecimalField(decimal_places=2, help_text='(in km)', max_digits=4, verbose_name='Distance from patient’s home to the health facility')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edcs_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Air Pollution Follow Up',
                'verbose_name_plural': 'Air Pollution Follow Up',
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
                'default_permissions': ('add', 'change', 'delete', 'view', 'export', 'import'),
            },
            managers=[
                ('on_site', django.contrib.sites.managers.CurrentSiteManager()),
                ('objects', edcs_visit_schedule.managers.CrfModelManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='subjectvisit',
            index=models.Index(fields=['subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence', 'report_datetime'], name='edcs_subjec_subject_83dd4b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectvisit',
            unique_together={('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')},
        ),
        migrations.AddIndex(
            model_name='clinicalreview',
            index=models.Index(fields=['subject_visit', 'site', 'id'], name='edcs_subjec_subject_ff9b85_idx'),
        ),
        migrations.AddIndex(
            model_name='cancerhistory',
            index=models.Index(fields=['subject_visit', 'site', 'id'], name='edcs_subjec_subject_df0707_idx'),
        ),
    ]
